# Borrowed from https://raw.githubusercontent.com/sharkdp/bat/master/.github/workflows/CICD.yml
name: release

env:
    MIN_SUPPORTED_RUST_VERSION: "1.45.0"
    CICD_INTERMEDIATES_DIR: "_cicd-intermediates"

on:
    workflow_dispatch:
    pull_request:
    push:
        branches:
            - main
        tags:
            - "*"

jobs:
    min_version:
        name: Minimum supported rust version
        runs-on: ubuntu-18.04
        steps:
            - name: Git checkout
              uses: actions/checkout@v2
            - name: Install rust toolchain (v${{ env.MIN_SUPPORTED_RUST_VERSION }})
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: ${{ env.MIN_SUPPORTED_RUST_VERSION }}
                  default: true
                  profile: minimal
                  components: clippy
            - name: Run clippy (on minimum supported rust version to prevent warnings we can't fix)
              uses: actions-rs/cargo@v1
              with:
                  command: clippy
                  args: --all-targets --all-features
            - name: Run tests
              uses: actions-rs/cargo@v1
              with:
                  command: test

    build:
        name: ${{ matrix.job.os }} (${{ matrix.job.target }})
        runs-on: ${{ matrix.job.os }}
        strategy:
            fail-fast: false
            matrix:
                job:
                    - {
                          os: ubuntu-18.04,
                          target: aarch64-unknown-linux-gnu,
                          use-cross: true,
                      }
                    - { os: ubuntu-18.04, target: x86_64-unknown-linux-gnu }
                    - {
                          os: ubuntu-18.04,
                          target: x86_64-unknown-linux-musl,
                          use-cross: true,
                      }
                    - { os: macos-10.15, target: x86_64-apple-darwin }
                    - { os: windows-2019, target: x86_64-pc-windows-gnu }
                    - { os: windows-2019, target: x86_64-pc-windows-msvc }
        steps:
            - name: Checkout source code
              uses: actions/checkout@v2

            - name: Install prerequisites
              shell: bash
              run: |
                  case ${{ matrix.job.target }} in
                    aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
                  esac

            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  target: ${{ matrix.job.target }}
                  override: true
                  profile: minimal

            - name: Show version information (Rust, cargo, GCC)
              shell: bash
              run: |
                  gcc --version || true
                  rustup -V
                  rustup toolchain list
                  rustup default
                  cargo -V
                  rustc -V

            - name: Build
              uses: actions-rs/cargo@v1
              with:
                  use-cross: ${{ matrix.job.use-cross }}
                  command: build
                  args: --release --target=${{ matrix.job.target }}

            - name: Strip debug information from executable
              id: strip
              shell: bash
              run: |
                  # Figure out suffix of binary
                  EXE_suffix=""
                  case ${{ matrix.job.target }} in
                    *-pc-windows-*) EXE_suffix=".exe" ;;
                  esac;

                  # Figure out what strip tool to use if any
                  STRIP="strip"
                  case ${{ matrix.job.target }} in
                    aarch64-unknown-linux-gnu) STRIP="aarch64-linux-gnu-strip" ;;
                    *-pc-windows-msvc) STRIP="" ;;
                  esac;

                  # Setup paths
                  BIN_DIR="${{ env.CICD_INTERMEDIATES_DIR }}/stripped-release-bin/"
                  mkdir -p "${BIN_DIR}"
                  BIN_NAME="${{ env.PROJECT_NAME }}${EXE_suffix}"
                  BIN_PATH="${BIN_DIR}/${BIN_NAME}"

                  # Copy the release build binary to the result location
                  cp "target/${{ matrix.job.target }}/release/${BIN_NAME}" "${BIN_DIR}"

                  # Also strip if possible
                  if [ -n "${STRIP}" ]; then
                    "${STRIP}" "${BIN_PATH}"
                  fi

                  # Let subsequent steps know where to find the (stripped) bin
                  echo ::set-output name=BIN_PATH::${BIN_PATH}
                  echo ::set-output name=BIN_NAME::${BIN_NAME}

            - name: Set testing options
              id: test-options
              shell: bash
              run: |
                  # test only library unit tests and binary for arm-type targets
                  unset CARGO_TEST_OPTIONS
                  unset CARGO_TEST_OPTIONS ; case ${{ matrix.job.target }} in arm-* | aarch64-*) CARGO_TEST_OPTIONS="--lib --bin ${PROJECT_NAME}" ;; esac;
                  echo ::set-output name=CARGO_TEST_OPTIONS::${CARGO_TEST_OPTIONS}

            - name: Run tests
              uses: actions-rs/cargo@v1
              continue-on-error: true
              with:
                  use-cross: ${{ matrix.job.use-cross }}
                  command: test
                  args: --target=${{ matrix.job.target }} ${{ steps.test-options.outputs.CARGO_TEST_OPTIONS}}
            # - name: Create tarball
            #   id: package
            #   shell: bash
            #   run: |
            #       PKG_suffix=".tar.gz" ; case ${{ matrix.job.target }} in *-pc-windows-*) PKG_suffix=".zip" ;; esac;
            #       PKG_BASENAME=${PROJECT_NAME}-v${PROJECT_VERSION}-${{ matrix.job.target }}
            #       PKG_NAME=${PKG_BASENAME}${PKG_suffix}
            #       echo ::set-output name=PKG_NAME::${PKG_NAME}
            #       PKG_STAGING="${{ env.CICD_INTERMEDIATES_DIR }}/package"
            #       ARCHIVE_DIR="${PKG_STAGING}/${PKG_BASENAME}/"
            #       mkdir -p "${ARCHIVE_DIR}"
            #       mkdir -p "${ARCHIVE_DIR}/autocomplete"
            #       # Binary
            #       cp "${{ steps.strip.outputs.BIN_PATH }}" "$ARCHIVE_DIR"
            #       # Man page
            #       cp 'target/${{ matrix.job.target }}/release/build/${{ env.PROJECT_NAME }}'-*/out/assets/manual/bat.1 "$ARCHIVE_DIR"
            #       # README, LICENSE and CHANGELOG files
            #       cp "README.md" "LICENSE-MIT" "LICENSE-APACHE" "CHANGELOG.md" "$ARCHIVE_DIR"
            #       # Autocompletion files
            #       cp 'target/${{ matrix.job.target }}/release/build/${{ env.PROJECT_NAME }}'-*/out/assets/completions/bat.fish "$ARCHIVE_DIR/autocomplete/${{ env.PROJECT_NAME }}.fish"
            #       cp 'target/${{ matrix.job.target }}/release/build/${{ env.PROJECT_NAME }}'-*/out/assets/completions/bat.zsh "$ARCHIVE_DIR/autocomplete/${{ env.PROJECT_NAME }}.zsh"
            #       # base compressed package
            #       pushd "${PKG_STAGING}/" >/dev/null
            #       case ${{ matrix.job.target }} in
            #         *-pc-windows-*) 7z -y a "${PKG_NAME}" "${PKG_BASENAME}"/* | tail -2 ;;
            #         *) tar czf "${PKG_NAME}" "${PKG_BASENAME}"/* ;;
            #       esac;
            #       popd >/dev/null
            #       # Let subsequent steps know where to find the compressed package
            #       echo ::set-output name=PKG_PATH::"${PKG_STAGING}/${PKG_NAME}"
            # - name: "Artifact upload: tarball"
            #   uses: actions/upload-artifact@master
            #   with:
            #       name: ${{ steps.package.outputs.PKG_NAME }}
            #       path: ${{ steps.package.outputs.PKG_PATH }}
            # - name: Check for release
            #   id: is-release
            #   shell: bash
            #   run: |
            #       unset IS_RELEASE ; if [[ $GITHUB_REF =~ ^refs/tags/v[0-9].* ]]; then IS_RELEASE='true' ; fi
            #       echo ::set-output name=IS_RELEASE::${IS_RELEASE}
            # - name: Publish archives and packages
            #   uses: softprops/action-gh-release@v1
            #   if: steps.is-release.outputs.IS_RELEASE
            #   with:
            #       files: |
            #           ${{ steps.package.outputs.PKG_PATH }}
            #   env:
            #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
